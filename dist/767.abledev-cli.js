#!/usr/bin/env node
"use strict";
exports.id = 767;
exports.ids = [767];
exports.modules = {

/***/ 767:
/***/ ((module) => {

module.exports = "import { execSync } from \"child_process\";\nimport fs from \"fs\";\nimport fsPromises from \"fs/promises\";\nimport makeDir from \"make-dir\";\nimport path from \"path\";\nimport createFiles from \"./createFiles\";\n\nasync function createNewComponent(\n  componentName: string,\n  rootPath: string,\n  override: boolean,\n) {\n  if (fs.existsSync(rootPath) && !override) {\n    throw new Error(`This folder already exists: ${rootPath}`);\n  }\n  await createNewComponentFiles(componentName, rootPath);\n  await runPostInstallTasks(componentName, rootPath);\n}\n\nasync function runPostInstallTasks(componentName: string, rootPath: string) {\n  installDependencies(rootPath);\n  initializePrisma(rootPath, componentName);\n}\n\nconst DEPENDENCIES = [\n  \"@ableco/abledev-dev-environment\",\n  \"@ableco/abledev-react\",\n  \"express\",\n].join(\" \");\n\nconst DEV_DEPENDENCIES = [\n  \"webpack\",\n  \"webpack-cli\",\n  \"ts-loader\",\n  \"ts-node\",\n  \"typescript\",\n  \"type-fest\",\n  \"react\",\n  \"@types/react\",\n  \"react-dom\",\n  \"@types/react-dom\",\n  \"prisma\",\n  \"@types/express\",\n].join(\" \");\n\nfunction installDependencies(rootPath: string) {\n  const npmFlags = \"--registry=https://registry.able.co\";\n\n  execCommand(rootPath, `npm install ${DEPENDENCIES} ${npmFlags}`);\n  execCommand(rootPath, `npm install -D ${DEV_DEPENDENCIES} ${npmFlags}`);\n}\n\nfunction execCommand(rootPath: string, command: string) {\n  execSync(command, {\n    stdio: [\"inherit\", \"inherit\", \"inherit\"],\n    cwd: rootPath,\n  });\n}\n\nasync function initializePrisma(rootPath: string, componentName: string) {\n  execCommand(rootPath, \"npx prisma init\");\n  await updateDatabaseUrl(rootPath, componentName);\n  await createDummyModel(rootPath);\n  execCommand(rootPath, \"npx prisma migrate dev --name initial\");\n}\n\nasync function updateDatabaseUrl(rootPath: string, componentName: string) {\n  const databaseName = `abledev_${componentName}`;\n  const user = execSync(\"whoami\").toString().trim();\n  const code = `DATABASE_URL=\"postgresql://${user}@localhost:5432/${databaseName}\"\\n`;\n\n  createDatabase(rootPath, user, databaseName);\n  await fsPromises.writeFile(path.join(rootPath, \".env\"), code);\n}\n\nfunction createDatabase(rootPath: string, user: string, databaseName: string) {\n  const command = `psql -U ${user} -tc \"SELECT 1 FROM pg_database WHERE datname = '${databaseName}';\" | grep -q 1 || psql -U ${user} -c \"CREATE DATABASE ${databaseName};\"`;\n  execCommand(rootPath, command);\n}\n\nasync function createDummyModel(rootPath: string) {\n  const code = `model Dummy {\n  id Int @id @default(autoincrement())\n}`;\n  await fsPromises.appendFile(\n    path.join(rootPath, \"prisma\", \"schema.prisma\"),\n    code,\n  );\n}\n\nasync function createNewComponentFiles(\n  componentName: string,\n  rootPath: string,\n) {\n  await createFiles(\n    {\n      rootPath: await makeDir(rootPath),\n      templatesRoot: \"./templates/new\",\n      variables: { componentName },\n    },\n    {\n      \"package.json\": true,\n      \"webpack.config.dev.ts\": true,\n      \"webpack.config.build.ts\": true,\n      \".npmrc\": \"npmrc\",\n      \".prettierrc.json\": \"prettierrc.json\", // dotfiles fail to import,\n      \"tsconfig.json\": \"tsconfig.jsonc\", // TS will try to use this file if it's named tsconfig.json\n      \"preview/index.html\": true,\n      \"preview/index.tsx\": true,\n      \"preview/getPreviewData.ts\": true,\n      \"preview/Preview.tsx\": true,\n      \"src/index.tsx\": true,\n      [`src/${componentName}.tsx`]: \"src/Component.tsx\",\n      \"src/HostContext.ts\": true,\n      \"src/queries/getData.ts\": true,\n      \"abledev/devServer.ts\": true,\n      \"abledev/createHandleRequest.ts\": true,\n      \"abledev/backend-functions/index.ts\": true,\n    },\n  );\n}\n\nexport default createNewComponent;\n";

/***/ })

};
;